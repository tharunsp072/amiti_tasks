/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Column, Task } from "./interfaces/models";
export { Column, Task } from "./interfaces/models";
export namespace Components {
    interface AddTaskFrom {
        "columnId": string;
    }
    interface KanbanBoard {
    }
    interface KanbanColumn {
        "column": Column;
    }
    interface KanbanTask {
        "columnId": string;
        "task": Task;
    }
}
export interface AddTaskFromCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAddTaskFromElement;
}
export interface KanbanColumnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKanbanColumnElement;
}
declare global {
    interface HTMLAddTaskFromElementEventMap {
        "taskAdded": {columnId : string,title : string , description?:string};
    }
    interface HTMLAddTaskFromElement extends Components.AddTaskFrom, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAddTaskFromElementEventMap>(type: K, listener: (this: HTMLAddTaskFromElement, ev: AddTaskFromCustomEvent<HTMLAddTaskFromElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAddTaskFromElementEventMap>(type: K, listener: (this: HTMLAddTaskFromElement, ev: AddTaskFromCustomEvent<HTMLAddTaskFromElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAddTaskFromElement: {
        prototype: HTMLAddTaskFromElement;
        new (): HTMLAddTaskFromElement;
    };
    interface HTMLKanbanBoardElement extends Components.KanbanBoard, HTMLStencilElement {
    }
    var HTMLKanbanBoardElement: {
        prototype: HTMLKanbanBoardElement;
        new (): HTMLKanbanBoardElement;
    };
    interface HTMLKanbanColumnElementEventMap {
        "taskAdded": { columnId: string; title: string; description?: string };
        "taskDropped": { taskId : string;fromColumnId : string;toColumnId : string};
    }
    interface HTMLKanbanColumnElement extends Components.KanbanColumn, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKanbanColumnElementEventMap>(type: K, listener: (this: HTMLKanbanColumnElement, ev: KanbanColumnCustomEvent<HTMLKanbanColumnElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKanbanColumnElementEventMap>(type: K, listener: (this: HTMLKanbanColumnElement, ev: KanbanColumnCustomEvent<HTMLKanbanColumnElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKanbanColumnElement: {
        prototype: HTMLKanbanColumnElement;
        new (): HTMLKanbanColumnElement;
    };
    interface HTMLKanbanTaskElement extends Components.KanbanTask, HTMLStencilElement {
    }
    var HTMLKanbanTaskElement: {
        prototype: HTMLKanbanTaskElement;
        new (): HTMLKanbanTaskElement;
    };
    interface HTMLElementTagNameMap {
        "add-task-from": HTMLAddTaskFromElement;
        "kanban-board": HTMLKanbanBoardElement;
        "kanban-column": HTMLKanbanColumnElement;
        "kanban-task": HTMLKanbanTaskElement;
    }
}
declare namespace LocalJSX {
    interface AddTaskFrom {
        "columnId"?: string;
        "onTaskAdded"?: (event: AddTaskFromCustomEvent<{columnId : string,title : string , description?:string}>) => void;
    }
    interface KanbanBoard {
    }
    interface KanbanColumn {
        "column"?: Column;
        "onTaskAdded"?: (event: KanbanColumnCustomEvent<{ columnId: string; title: string; description?: string }>) => void;
        "onTaskDropped"?: (event: KanbanColumnCustomEvent<{ taskId : string;fromColumnId : string;toColumnId : string}>) => void;
    }
    interface KanbanTask {
        "columnId"?: string;
        "task"?: Task;
    }
    interface IntrinsicElements {
        "add-task-from": AddTaskFrom;
        "kanban-board": KanbanBoard;
        "kanban-column": KanbanColumn;
        "kanban-task": KanbanTask;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-task-from": LocalJSX.AddTaskFrom & JSXBase.HTMLAttributes<HTMLAddTaskFromElement>;
            "kanban-board": LocalJSX.KanbanBoard & JSXBase.HTMLAttributes<HTMLKanbanBoardElement>;
            "kanban-column": LocalJSX.KanbanColumn & JSXBase.HTMLAttributes<HTMLKanbanColumnElement>;
            "kanban-task": LocalJSX.KanbanTask & JSXBase.HTMLAttributes<HTMLKanbanTaskElement>;
        }
    }
}
