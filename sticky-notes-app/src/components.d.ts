/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Note, NoteDraft } from "./interfaces/models";
export { Note, NoteDraft } from "./interfaces/models";
export namespace Components {
    interface NoteForm {
    }
    interface NoteItem {
        "note": Note;
    }
    interface NotesBoard {
        /**
          * @default []
         */
        "notes": Note[];
    }
    interface StickyNotesApp {
    }
}
export interface NoteFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNoteFormElement;
}
export interface NoteItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNoteItemElement;
}
export interface NotesBoardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNotesBoardElement;
}
declare global {
    interface HTMLNoteFormElementEventMap {
        "noteCreated": NoteDraft;
    }
    interface HTMLNoteFormElement extends Components.NoteForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNoteFormElementEventMap>(type: K, listener: (this: HTMLNoteFormElement, ev: NoteFormCustomEvent<HTMLNoteFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNoteFormElementEventMap>(type: K, listener: (this: HTMLNoteFormElement, ev: NoteFormCustomEvent<HTMLNoteFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNoteFormElement: {
        prototype: HTMLNoteFormElement;
        new (): HTMLNoteFormElement;
    };
    interface HTMLNoteItemElementEventMap {
        "noteDragStart": { noteId: string };
        "noteMoved": { noteId: string; x: number; y: number };
        "removeNote": { noteId: string };
        "editNote": { noteId: string };
    }
    interface HTMLNoteItemElement extends Components.NoteItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNoteItemElementEventMap>(type: K, listener: (this: HTMLNoteItemElement, ev: NoteItemCustomEvent<HTMLNoteItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNoteItemElementEventMap>(type: K, listener: (this: HTMLNoteItemElement, ev: NoteItemCustomEvent<HTMLNoteItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNoteItemElement: {
        prototype: HTMLNoteItemElement;
        new (): HTMLNoteItemElement;
    };
    interface HTMLNotesBoardElementEventMap {
        "noteMoved": { noteId: string; x: number; y: number };
        "noteRemoved": { noteId: string };
    }
    interface HTMLNotesBoardElement extends Components.NotesBoard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNotesBoardElementEventMap>(type: K, listener: (this: HTMLNotesBoardElement, ev: NotesBoardCustomEvent<HTMLNotesBoardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNotesBoardElementEventMap>(type: K, listener: (this: HTMLNotesBoardElement, ev: NotesBoardCustomEvent<HTMLNotesBoardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNotesBoardElement: {
        prototype: HTMLNotesBoardElement;
        new (): HTMLNotesBoardElement;
    };
    interface HTMLStickyNotesAppElement extends Components.StickyNotesApp, HTMLStencilElement {
    }
    var HTMLStickyNotesAppElement: {
        prototype: HTMLStickyNotesAppElement;
        new (): HTMLStickyNotesAppElement;
    };
    interface HTMLElementTagNameMap {
        "note-form": HTMLNoteFormElement;
        "note-item": HTMLNoteItemElement;
        "notes-board": HTMLNotesBoardElement;
        "sticky-notes-app": HTMLStickyNotesAppElement;
    }
}
declare namespace LocalJSX {
    interface NoteForm {
        "onNoteCreated"?: (event: NoteFormCustomEvent<NoteDraft>) => void;
    }
    interface NoteItem {
        "note"?: Note;
        "onEditNote"?: (event: NoteItemCustomEvent<{ noteId: string }>) => void;
        "onNoteDragStart"?: (event: NoteItemCustomEvent<{ noteId: string }>) => void;
        "onNoteMoved"?: (event: NoteItemCustomEvent<{ noteId: string; x: number; y: number }>) => void;
        "onRemoveNote"?: (event: NoteItemCustomEvent<{ noteId: string }>) => void;
    }
    interface NotesBoard {
        /**
          * @default []
         */
        "notes"?: Note[];
        "onNoteMoved"?: (event: NotesBoardCustomEvent<{ noteId: string; x: number; y: number }>) => void;
        "onNoteRemoved"?: (event: NotesBoardCustomEvent<{ noteId: string }>) => void;
    }
    interface StickyNotesApp {
    }
    interface IntrinsicElements {
        "note-form": NoteForm;
        "note-item": NoteItem;
        "notes-board": NotesBoard;
        "sticky-notes-app": StickyNotesApp;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "note-form": LocalJSX.NoteForm & JSXBase.HTMLAttributes<HTMLNoteFormElement>;
            "note-item": LocalJSX.NoteItem & JSXBase.HTMLAttributes<HTMLNoteItemElement>;
            "notes-board": LocalJSX.NotesBoard & JSXBase.HTMLAttributes<HTMLNotesBoardElement>;
            "sticky-notes-app": LocalJSX.StickyNotesApp & JSXBase.HTMLAttributes<HTMLStickyNotesAppElement>;
        }
    }
}
