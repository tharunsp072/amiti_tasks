/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Habit } from "./components/models/model";
export { Habit } from "./components/models/model";
export namespace Components {
    interface AppRoot {
    }
    interface HabitCard {
        "habit": Habit;
    }
    interface HabitForm {
    }
    interface PageAddHabit {
    }
    interface PageDashboard {
    }
    interface PageSettings {
    }
    interface PageStats {
    }
}
export interface HabitCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHabitCardElement;
}
export interface HabitFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHabitFormElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLHabitCardElementEventMap {
        "removeHabit": number;
        "habitToggled": Habit;
    }
    interface HTMLHabitCardElement extends Components.HabitCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLHabitCardElementEventMap>(type: K, listener: (this: HTMLHabitCardElement, ev: HabitCardCustomEvent<HTMLHabitCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLHabitCardElementEventMap>(type: K, listener: (this: HTMLHabitCardElement, ev: HabitCardCustomEvent<HTMLHabitCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLHabitCardElement: {
        prototype: HTMLHabitCardElement;
        new (): HTMLHabitCardElement;
    };
    interface HTMLHabitFormElementEventMap {
        "habitAdded": { title: string; description: string; target: number; done: number; completed: boolean };
    }
    interface HTMLHabitFormElement extends Components.HabitForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLHabitFormElementEventMap>(type: K, listener: (this: HTMLHabitFormElement, ev: HabitFormCustomEvent<HTMLHabitFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLHabitFormElementEventMap>(type: K, listener: (this: HTMLHabitFormElement, ev: HabitFormCustomEvent<HTMLHabitFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLHabitFormElement: {
        prototype: HTMLHabitFormElement;
        new (): HTMLHabitFormElement;
    };
    interface HTMLPageAddHabitElement extends Components.PageAddHabit, HTMLStencilElement {
    }
    var HTMLPageAddHabitElement: {
        prototype: HTMLPageAddHabitElement;
        new (): HTMLPageAddHabitElement;
    };
    interface HTMLPageDashboardElement extends Components.PageDashboard, HTMLStencilElement {
    }
    var HTMLPageDashboardElement: {
        prototype: HTMLPageDashboardElement;
        new (): HTMLPageDashboardElement;
    };
    interface HTMLPageSettingsElement extends Components.PageSettings, HTMLStencilElement {
    }
    var HTMLPageSettingsElement: {
        prototype: HTMLPageSettingsElement;
        new (): HTMLPageSettingsElement;
    };
    interface HTMLPageStatsElement extends Components.PageStats, HTMLStencilElement {
    }
    var HTMLPageStatsElement: {
        prototype: HTMLPageStatsElement;
        new (): HTMLPageStatsElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "habit-card": HTMLHabitCardElement;
        "habit-form": HTMLHabitFormElement;
        "page-add-habit": HTMLPageAddHabitElement;
        "page-dashboard": HTMLPageDashboardElement;
        "page-settings": HTMLPageSettingsElement;
        "page-stats": HTMLPageStatsElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface HabitCard {
        "habit": Habit;
        "onHabitToggled"?: (event: HabitCardCustomEvent<Habit>) => void;
        "onRemoveHabit"?: (event: HabitCardCustomEvent<number>) => void;
    }
    interface HabitForm {
        "onHabitAdded"?: (event: HabitFormCustomEvent<{ title: string; description: string; target: number; done: number; completed: boolean }>) => void;
    }
    interface PageAddHabit {
    }
    interface PageDashboard {
    }
    interface PageSettings {
    }
    interface PageStats {
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "habit-card": HabitCard;
        "habit-form": HabitForm;
        "page-add-habit": PageAddHabit;
        "page-dashboard": PageDashboard;
        "page-settings": PageSettings;
        "page-stats": PageStats;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "habit-card": LocalJSX.HabitCard & JSXBase.HTMLAttributes<HTMLHabitCardElement>;
            "habit-form": LocalJSX.HabitForm & JSXBase.HTMLAttributes<HTMLHabitFormElement>;
            "page-add-habit": LocalJSX.PageAddHabit & JSXBase.HTMLAttributes<HTMLPageAddHabitElement>;
            "page-dashboard": LocalJSX.PageDashboard & JSXBase.HTMLAttributes<HTMLPageDashboardElement>;
            "page-settings": LocalJSX.PageSettings & JSXBase.HTMLAttributes<HTMLPageSettingsElement>;
            "page-stats": LocalJSX.PageStats & JSXBase.HTMLAttributes<HTMLPageStatsElement>;
        }
    }
}
